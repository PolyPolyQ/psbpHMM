// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _psbpHMM_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _psbpHMM_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _psbpHMM_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _psbpHMM_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _psbpHMM_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// addTwo
NumericVector addTwo(NumericVector x);
RcppExport SEXP _psbpHMM_addTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(addTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// minusTwo
NumericVector minusTwo(NumericVector x);
RcppExport SEXP _psbpHMM_minusTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(minusTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// a1
arma::mat a1(arma::mat x);
RcppExport SEXP _psbpHMM_a1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(a1(x));
    return rcpp_result_gen;
END_RCPP
}
// a2
arma::vec a2(arma::vec x);
RcppExport SEXP _psbpHMM_a2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(a2(x));
    return rcpp_result_gen;
END_RCPP
}
// a8
List a8(int n, int r, double v);
RcppExport SEXP _psbpHMM_a8(SEXP nSEXP, SEXP rSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(a8(n, r, v));
    return rcpp_result_gen;
END_RCPP
}
// mhDecomp
arma::mat mhDecomp(arma::mat L, arma::mat D);
RcppExport SEXP _psbpHMM_mhDecomp(SEXP LSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(mhDecomp(L, D));
    return rcpp_result_gen;
END_RCPP
}
// invMat
arma::mat invMat(arma::mat x);
RcppExport SEXP _psbpHMM_invMat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(invMat(x));
    return rcpp_result_gen;
END_RCPP
}
// updatePi
List updatePi(List beta, List X, arma::vec a0, arma::mat ajk, int tmax);
RcppExport SEXP _psbpHMM_updatePi(SEXP betaSEXP, SEXP XSEXP, SEXP a0SEXP, SEXP ajkSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ajk(ajkSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePi(beta, X, a0, ajk, tmax));
    return rcpp_result_gen;
END_RCPP
}
// returnPi
double returnPi();
RcppExport SEXP _psbpHMM_returnPi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(returnPi());
    return rcpp_result_gen;
END_RCPP
}
// mvndensity
double mvndensity(arma::vec y, arma::vec mu, arma::mat Sigma, double d);
RcppExport SEXP _psbpHMM_mvndensity(SEXP ySEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mvndensity(y, mu, Sigma, d));
    return rcpp_result_gen;
END_RCPP
}
// upZ
List upZ(List stateList, List y, List mu, List Sigma, double logStuff, double nudf, List detRstar, List piz, List u, int tmax, int K, int n, double d);
RcppExport SEXP _psbpHMM_upZ(SEXP stateListSEXP, SEXP ySEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP logStuffSEXP, SEXP nudfSEXP, SEXP detRstarSEXP, SEXP pizSEXP, SEXP uSEXP, SEXP tmaxSEXP, SEXP KSEXP, SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type stateList(stateListSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type logStuff(logStuffSEXP);
    Rcpp::traits::input_parameter< double >::type nudf(nudfSEXP);
    Rcpp::traits::input_parameter< List >::type detRstar(detRstarSEXP);
    Rcpp::traits::input_parameter< List >::type piz(pizSEXP);
    Rcpp::traits::input_parameter< List >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(upZ(stateList, y, mu, Sigma, logStuff, nudf, detRstar, piz, u, tmax, K, n, d));
    return rcpp_result_gen;
END_RCPP
}
// csample_num
NumericVector csample_num(NumericVector x, int size, bool replace, NumericVector prob);
RcppExport SEXP _psbpHMM_csample_num(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(csample_num(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// csample_int
IntegerVector csample_int(IntegerVector x, int size, bool replace, NumericVector prob);
RcppExport SEXP _psbpHMM_csample_int(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(csample_int(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// a3
arma::mat a3(NumericMatrix x);
RcppExport SEXP _psbpHMM_a3(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(a3(x));
    return rcpp_result_gen;
END_RCPP
}
// a4
NumericMatrix a4(arma::mat x);
RcppExport SEXP _psbpHMM_a4(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(a4(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_psbpHMM_rcpparma_hello_world", (DL_FUNC) &_psbpHMM_rcpparma_hello_world, 0},
    {"_psbpHMM_rcpparma_outerproduct", (DL_FUNC) &_psbpHMM_rcpparma_outerproduct, 1},
    {"_psbpHMM_rcpparma_innerproduct", (DL_FUNC) &_psbpHMM_rcpparma_innerproduct, 1},
    {"_psbpHMM_rcpparma_bothproducts", (DL_FUNC) &_psbpHMM_rcpparma_bothproducts, 1},
    {"_psbpHMM_timesTwo", (DL_FUNC) &_psbpHMM_timesTwo, 1},
    {"_psbpHMM_addTwo", (DL_FUNC) &_psbpHMM_addTwo, 1},
    {"_psbpHMM_minusTwo", (DL_FUNC) &_psbpHMM_minusTwo, 1},
    {"_psbpHMM_a1", (DL_FUNC) &_psbpHMM_a1, 1},
    {"_psbpHMM_a2", (DL_FUNC) &_psbpHMM_a2, 1},
    {"_psbpHMM_a8", (DL_FUNC) &_psbpHMM_a8, 3},
    {"_psbpHMM_mhDecomp", (DL_FUNC) &_psbpHMM_mhDecomp, 2},
    {"_psbpHMM_invMat", (DL_FUNC) &_psbpHMM_invMat, 1},
    {"_psbpHMM_updatePi", (DL_FUNC) &_psbpHMM_updatePi, 5},
    {"_psbpHMM_returnPi", (DL_FUNC) &_psbpHMM_returnPi, 0},
    {"_psbpHMM_mvndensity", (DL_FUNC) &_psbpHMM_mvndensity, 4},
    {"_psbpHMM_upZ", (DL_FUNC) &_psbpHMM_upZ, 13},
    {"_psbpHMM_csample_num", (DL_FUNC) &_psbpHMM_csample_num, 4},
    {"_psbpHMM_csample_int", (DL_FUNC) &_psbpHMM_csample_int, 4},
    {"_psbpHMM_a3", (DL_FUNC) &_psbpHMM_a3, 1},
    {"_psbpHMM_a4", (DL_FUNC) &_psbpHMM_a4, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_psbpHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
